name: Build

on:
  push:
    tags:
      - "*"

env:
  PROJECT_NAME: game
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ${{ matrix.runner }}

    strategy:
      matrix:
        include:
          - name: linux-amd64
            runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - name: win-amd64
            runner: windows-latest
            target: x86_64-pc-windows-msvc

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: "${{ matrix.target }}"
          toolchain: stable

      - name: Install linux dependencies
        if: matrix.name == 'linux-amd64'
        run: |
          sudo apt-get update
          sudo apt-get install -y clang mold pkg-config libx11-dev libasound2-dev libudev-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libwayland-dev

      - name: Install Windows dependencies
        if: matrix.name == 'win-amd64'
        run: |
          cargo install -f cargo-binutils
          rustup component add llvm-tools-preview

      - name: Configure dependencies
        run: |
          cargo remove bevy
          cargo add bevy -F wayland
          cargo add log -F max_level_debug,release_max_level_warn
          sed -i -E 's/(log = \{ version = )"[0-9.]+"(, features = \[.*\] \})/\1"*"\2/' Cargo.toml

      - name: Setup Cache
        uses: Swatinem/rust-cache@v2

      - name: Build Binary
        run: cargo build --verbose --locked --release --target ${{ matrix.target }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: target/${{ matrix.target }}/release/${{ env.PROJECT_NAME }}${{ runner.os == 'Windows' && '.exe' || '' }}
